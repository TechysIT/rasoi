generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
enum CashFlowType {
  CASH_IN
  CASH_OUT
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MERGED
}
enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


model Organization {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  subscriptionStart DateTime
  subscriptionEnd   DateTime
  stores            Store[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  @@index([email])
  @@index([id])
}

model Store {
  id             String    @id @default(uuid())
  name           String
  logo           String?
  taxRate        Int?
  organizationId String?
  orders         Order[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  SocialLink SocialLink[]

  DeviceSetting DeviceSetting[]

  Voucher Voucher[]

  Employee Employee[]

  Customer Customer[]

  Dish Dish[]

  Inventory Inventory[]

  Category Category[]

  Report       Report[]
  Role         Role[]
  organization Organization? @relation(fields: [organizationId], references: [id])

  Addon Addon[]

  Table Table[]

  EmployeeCashFlow EmployeeCashFlow[]
}

model DeviceSetting {
  id              String    @id @default(uuid())
  store           Store     @relation(fields: [storeId], references: [id])
  storeId         String
  theme           String?
  printer         String?
  paperSize       String?
  updateAvailable Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model SocialLink {
  id        String    @id @default(uuid())
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String
  platform  String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Voucher {
  id        String    @id @default(uuid())
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String
  code      String    @unique
  discount  Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Role {
  id   String @id @default(uuid())
  name String @unique()

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  storeId   String
  store     Store      @relation(fields: [storeId], references: [id])
  employees Employee[]

  userManagement      Boolean @default(false)
  orderManagement     Boolean @default(false)
  inventoryManagement Boolean @default(false)
  reportManagement    Boolean @default(false)
  menuManagement      Boolean @default(false)
  settingManagement   Boolean @default(false)
  roleManagement      Boolean @default(false)
  kitchenManagement     Boolean @default(false)
  cashManagement      Boolean @default(false)
  customerManagement Boolean @default(false)
  supplierManagement Boolean @default(false)
}

model Employee {
  id         String    @id @default(uuid())
  storeId    String
  roleId     String
  firstName  String
  lastName   String
  phone      String
  address    String
  email      String    @unique
  avatarPath String?
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  lastLogin  DateTime?

  store Store @relation(fields: [storeId], references: [id])
  role  Role  @relation(fields: [roleId], references: [id])

  Inventory Inventory[]

  Dish Dish[]

  EmployeeCashFlow EmployeeCashFlow[]

  Order Order[]
}

model Customer {
  id        String    @id @default(uuid())
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String
  name      String
  email     String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Order Order[]
}

model Order {
  id              String       @id @default(uuid())
  store           Store        @relation(fields: [storeId], references: [id])
  storeId         String
  customer        Customer?    @relation(fields: [customerId], references: [id])
  customerId      String?
  orderType       OrderType
  status          OrderStatus
  deliveryStatus  DeliveryStatus
  amount          Float
  paymentStatus   String
  peakAt          DateTime?
  feedbackScore   Float?
  notes           String?
  assignedStaff   String?

  createdBy       String
  createdByEmployee Employee    @relation(fields: [createdBy], references: [id])

  updatedOn       DateTime      @default(now()) @updatedAt
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?

  OrderItems      OrderItem[]
  OrderLog        OrderLog[]

  @@index([storeId])
  @@index([customerId])
}


model OrderItem {
  id        String     @id @default(uuid())
  order     Order      @relation(fields: [orderId], references: [id])
  orderId   String
  dish      Dish       @relation(fields: [dishId], references: [id])
  dishId    String
  quantity  Int
  price     Float

  OrderItemAddons OrderItemAddon[]
}


model OrderItemAddon {
  id           String    @id @default(uuid())
  orderItem    OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId  String
  addon        Addon     @relation(fields: [addonId], references: [id])
  addonId      String
  addonName    String
  addonPrice   Float
}


model OrderLog {
  id        String    @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Dish {
  id           String         @id @default(uuid())
  name         String
  rating       Float?
  addOns       String?
  bowls        Int            @default(1)
  persons      Int            @default(1)
  price        Float
  imageUrl     String?
  itemDetails  String?
  deletedAt    DateTime?
  storeId      String?
  employeeId   String?
  categoryId   String?

  store        Store?         @relation(fields: [storeId], references: [id])
  employee     Employee?      @relation(fields: [employeeId], references: [id])
  category     Category?      @relation(fields: [categoryId], references: [id])
  inventoryItems DishInventory[]
  Addon        Addon[]



  OrderItem OrderItem[]
}

model DishInventory {
  id               String   @id @default(uuid())
  dishId           String
  inventoryItemId  String
  defaultSelected  Boolean @default(false)
  quantity         Int     @default(1)
  dish             Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)
  inventoryItem    Inventory @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model Addon {
  id        String   @id @default(uuid())
  dishId    String?
  storeId   String?
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  

  dish      Dish?    @relation(fields: [dishId], references: [id])
  store     Store?   @relation(fields: [storeId], references: [id])

  OrderItemAddon OrderItemAddon[]
}


model Inventory {
  id            String   @id @default(uuid())
  storeId       String?
  name          String
  quantity      Int
  threshold     Int
  supplier      String?
  createdBy     String?
  createdById   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  store         Store?   @relation(fields: [storeId], references: [id])
  createdByUser Employee? @relation(fields: [createdById], references: [id])
  usedInDishes  DishInventory[]
}


model Category {
  id        String    @id @default(uuid())
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String
  name      String
  status    Boolean   @default(true) 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Dish Dish[]
}

model Report {
  id         String    @id @default(uuid())
  store      Store     @relation(fields: [storeId], references: [id])
  storeId    String
  reportType String
  data       Json
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model EmployeeCashFlow {
  id          String    @id @default(uuid())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  store            Store         @relation(fields: [storeId], references: [id])
  storeId          String
  type        CashFlowType
  amount      Float
  reason      String
  pdfUrl      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Table {
  id               String        @id @default(uuid())
  store            Store         @relation(fields: [storeId], references: [id])
  storeId          String
  name             String
  chairs           Int
  status           TableStatus   @default(AVAILABLE)
  customerName     String?
  reservationName  String?
  reservationTime  DateTime?
  mergedInto       Table?        @relation("MergedInto", fields: [mergedIntoId], references: [id])
  mergedIntoId     String?
  mergedTables     Table[]       @relation("MergedInto")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

